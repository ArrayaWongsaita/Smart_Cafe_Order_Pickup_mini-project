import { io, Socket } from 'socket.io-client';
import { create } from 'zustand';

import { toast } from 'sonner';
import { SOCKET_EVENTS } from '@/shared/constants/socket.constant';
import { getSession } from 'next-auth/react';
import { AppRouterInstance } from 'next/dist/shared/lib/app-router-context.shared-runtime';
import { PUBLIC_ROUTE } from '@/shared/constants';
import envClientConfig from '@/shared/config/envClient.config';

interface SocketState {
  socket: Socket | null;
  isConnected: boolean;
  isCallingToConnect: boolean;
  socketId: string;
}

interface SocketActions {
  connect: (router: AppRouterInstance) => void;
  disconnect: () => void;
}

interface SocketStore extends SocketState, SocketActions {}

export const useSocket = create<SocketStore>((set) => ({
  // State ‡∏´‡∏•‡∏±‡∏Å
  socket: null, // ‡πÄ‡∏Å‡πá‡∏ö instance ‡∏Ç‡∏≠‡∏á socket
  isConnected: false, // true ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  isCallingToConnect: false, // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  socketId: '', // ‡πÄ‡∏Å‡πá‡∏ö socket.id ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ socket
  connect: async (router: AppRouterInstance) => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á socket instance ‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏° auth token
    const session = await getSession();

    // Check for session errors
    if (session && session.error?.refreshToken) {
      router.push(PUBLIC_ROUTE.SIGN_OUT);
    }
    const socket: Socket = io(envClientConfig.NEXT_PUBLIC_SOCKET_URL, {
      auth: {
        token: session?.token?.accessToken || '',
      },
    });

    // ‚úÖ 1) connect: Fired ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    socket.on(SOCKET_EVENTS.CONNECT, () => {
      console.log('[SocketStore] ‚úÖ Socket connected:', socket.id);

      set({
        socket,
        isConnected: true,
        socketId: socket.id || '',
        isCallingToConnect: false,
      });
    });

    // ‚úÖ 2) disconnect: Fired ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏∏‡∏î
    socket.on(SOCKET_EVENTS.DISCONNECT, (reason: string) => {
      console.log('[SocketStore] ‚ö°Ô∏è Socket disconnected. Reason:', reason);

      set({
        socket: null,
        isConnected: false,
        socketId: '',
      });
    });

    // ‚úÖ 3) connect_error: Fired ‡πÄ‡∏°‡∏∑‡πà‡∏≠ handshake ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÄ‡∏ä‡πà‡∏ô token ‡∏ú‡∏¥‡∏î
    socket.on(SOCKET_EVENTS.CONNECT_ERROR, (err: Error) => {
      console.error('[SocketStore] ‚ùå Socket connection error:', err.message);
      toast.error('Socket connection error: ' + err.message);
    });

    // ‚úÖ 4) error: ‡∏£‡∏±‡∏ö custom error ‡∏ñ‡πâ‡∏≤ server emit('error')
    socket.on(SOCKET_EVENTS.ERROR, (err: string | Error) => {
      console.error('[SocketStore] üö® Server sent error event:', err);
      toast.error('Server sent error event: ' + err);
    });

    socket.on(SOCKET_EVENTS.VALIDATION_ERROR, (err: Error) => {
      toast.error('Server sent validation error message: ' + err.message);
    });

    // ‡πÄ‡∏Å‡πá‡∏ö socket instance ‡∏•‡∏á state
    set({ socket, isCallingToConnect: true });
    console.log('[SocketStore] Connecting to socket...');
  },

  // ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ socket + ‡∏•‡πâ‡∏≤‡∏á listener
  disconnect: () => {
    console.log('[SocketStore] Disconnecting socket...');
    set((state: SocketState) => {
      if (state.socket) {
        console.log('[SocketStore] Closing socket...');
        state.socket.off(); // ‡∏•‡∏ö listener ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!)
        state.socket.disconnect();
      }

      return {
        socket: null,
        isConnected: false,
        socketId: '',
      };
    });
  },
}));
